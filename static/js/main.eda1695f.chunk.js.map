{"version":3,"sources":["serviceWorker.js","dijkstra/node.js","dijkstra/algo.js","dijkstra/board.js","index.js"],"names":["Boolean","window","location","hostname","match","Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","flag_for_start_selecton","flag_for_end_selection","flag_for_algo_status","visitedNodes","Board","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","setTimeout","alert","i","document","getElementById","nodesInShortestPathOrder","animateShortestPath","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","clearboard","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","React","currentRow","createNode","slice","newNode","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eda1695f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}>  </div>\r\n    );\r\n  }\r\n}","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// export function dijkstra ( grid , startnode , finishnode)\r\n// {\r\n// \tconst unvisitednode=get_node(grid);\r\n// \tconst visitednode=[];\r\n// \twhile(!!unvisitednode.length )\r\n// \t{\r\n// \t\tsort_node(unvisitednode );\r\n// \t\tconst min_node=unvisitednode.shift();  // removes first element and return it\r\n\t\t\r\n// \t\tif( min_node.iswall ) continue;\r\n// \t\tif( min_node.distance === Infinity ) return visitednode;\r\n// \t\tif( min_node === finishnode ) return visitednode;\r\n\r\n// \t\tmin_node.isVisited=true;\r\n// \t\tvisitednode.push(min_node);\r\n\r\n// \t\tupdate_neighbour( min_node , grid );\r\n// \t}\r\n// }\r\n// function get_node(grid)\r\n// {\r\n// \tconst nodes=[];\r\n// \tfor( const row of grid )\r\n// \t\tfor( const node of row)\r\n// \t\t\tnodes.push(node);\r\n// \treturn nodes;\r\n// }\r\n// function sort_node( nodes )\r\n// {\r\n// \tnodes.sort(  (node_a , node_b) => node_a.distance - node_b.distance ) ;\r\n// }\r\n// function update_neighbour( node , grid )\r\n// {\r\n// \tconst neighbour=[];\r\n// \tconst {row ,col }= node;\r\n\t\r\n// \tif (row > 0)   neighbour.push(grid[row - 1][col]);\r\n//   \tif (row < grid.length - 1)   neighbour.push(grid[row + 1][col]);\r\n//  \tif (col > 0)    neighbour.push(grid[row][col - 1]);\r\n//   \tif (col < grid[0].length - 1)   neighbour.push(grid[row][col + 1]);\r\n\t\r\n// \tconst neighbours=neighbour.filter(neigh => !neigh.isVisited);\r\n\r\n// \tfor( const inst of neighbours)\r\n// \t{\r\n// \t\tinst.distance=inst.distance+1;\r\n// \t\tinst.previousNode=node;\r\n// \t}\r\n// }\r\n// export function getNodesInShortestPathOrder(finishNode)\r\n// {\t\r\n// \tconst node_in_shortest_order=[];\r\n// \tlet current_node=finishNode;\r\n// \twhile( current_node != null )\r\n// \t{\r\n// \t\tnode_in_shortest_order.unshift(current_node); // adds current_node as first element of array\r\n// \t\tcurrent_node=current_node.previousNode;\r\n// \t}\r\n// \treturn node_in_shortest_order;\r\n// }\r\n","import React from 'react';\r\nimport './board.css';\r\nimport Node from './node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from './algo';\r\nvar START_NODE_ROW = 10;\r\nvar START_NODE_COL = 15;\r\nvar FINISH_NODE_ROW = 10;\r\nvar FINISH_NODE_COL = 35;\r\nvar flag_for_start_selecton=1;\r\nvar flag_for_end_selection =1;\r\nvar flag_for_algo_status=0;\r\nconst visitedNodes=[];\r\nexport default class Board extends React.Component {\r\n\tconstructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      \r\n    \t};\r\n\t}\r\n\tcomponentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  \t}\r\n  \thandleMouseDown(row, col) {\r\n  \tif( flag_for_start_selecton ===1 && flag_for_end_selection ===1)\r\n  \t{\r\n  \t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  \t}\r\n    else if( flag_for_start_selecton === 0 )\r\n    {\r\n    \tSTART_NODE_ROW=row;\r\n    \tSTART_NODE_COL=col;\r\n    \tconst newGrid =getInitialGrid();\r\n  \tthis.setState({ grid:newGrid , mouseIsPressed: true });\r\n    \tflag_for_start_selecton =1;\r\n\r\n    }\r\n    else if( flag_for_end_selection === 0)\r\n    {\r\n    \tFINISH_NODE_ROW=row;\r\n    \tFINISH_NODE_COL=col;\r\n    \tconst newGrid =getInitialGrid();\r\n  \tthis.setState({ grid:newGrid , mouseIsPressed: true });\r\n    \tflag_for_end_selection=1;\r\n    setTimeout(\t() => {alert(\"now click to select wall !!\"); } , 1000);\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\nif( flag_for_start_selecton ===1 && flag_for_end_selection ===1)\r\n  \t{\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n}\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  clearboard(){\r\n  \tflag_for_start_selecton =0;\r\n  \tflag_for_end_selection =0;\r\n  \tSTART_NODE_ROW=0;\r\n  \tSTART_NODE_COL=0;\r\n  \tFINISH_NODE_ROW=0;\r\n  \tFINISH_NODE_COL=0;\r\n  \tif( flag_for_algo_status === 1)\r\n  \t{\r\n  \t\tfor( let i=0; i< visitedNodes.length ; i++)\r\n  \t\t{\r\n  \t\t\tconst node=visitedNodes[i];\r\n  \t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className=\r\n  \t\t\t'node node-unvisited';\r\n  \t\t}\r\n  \t}\r\n  \tflag_for_algo_status = 0;\r\n  \tconst newGrid =getInitialGrid();\r\n  \tthis.setState({ grid:newGrid , mouseIsPressed: false });\r\n  \t\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n  \tif( flag_for_start_selecton===0 || flag_for_end_selection===0 )\r\n  \t{\r\n  \t\talert(\"please select start and finish points first!!\");\r\n  \t}\r\n  \telse{\r\n  \tflag_for_algo_status=1;\r\n\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n   \tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n\r\n   \tfor(let i=0; i< visitedNodesInOrder.length; i++)\r\n   \t{\r\n   \t\tvisitedNodes[i]=visitedNodesInOrder[i];\r\n   \t}\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  \t}\r\n  }\r\n\trender() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      \t<button className=\"visualbutton\" onClick={() => this.visualizeDijkstra()}> Visualize dijkstra </button>\r\n      \t<button className=\"clearbutton\" onClick ={() => this.clearboard()} > CLEAR-BOARD </button>\r\n      \t<p id=\"cordinate\">coordinate:  start node = { START_NODE_ROW } { START_NODE_COL }  finish node = { FINISH_NODE_ROW } { FINISH_NODE_COL }</p>\r\n        <div className=\"board\">\r\n          {grid.map( (row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                }\r\n                 )}\r\n              </div>\r\n            );\r\n          } )\r\n            }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n \r\n}\r\n const getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 53; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n\t};\r\n\r\n  const createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n \t };\r\n  };\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Board from './dijkstra/board';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Board />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}